name: Terraform CI/CD

on:
  push:
    branches:
      - dev
    paths:
      - 'terraform/backend/**'
      - 'terraform/deployment/**'
      - 'terraform/infra/**'
      - 'terraform/terraform.tfvars'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches:
      - main
  merge_group:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  id-token: write

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    strategy:
      matrix:
        dir: [backend, deployment, infra]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.8

      - name: Configure AWS Credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: echo "AWS credentials configured"

      - name: Terraform Init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: terraform init
        working-directory: terraform/${{ matrix.dir }}

      - name: Terraform Fmt
        run: terraform fmt -check
        working-directory: terraform/${{ matrix.dir }}

      - name: Terraform Validate
        run: terraform validate
        working-directory: terraform/${{ matrix.dir }}

      - name: Terraform Plan
        id: plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: |
          terraform plan -no-color -out=tfplan -var-file=../terraform.tfvars
          terraform show -no-color tfplan > plan.txt
        working-directory: terraform/${{ matrix.dir }}

      - name: Upload Terraform Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ matrix.dir }}
          path: terraform/${{ matrix.dir }}/tfplan
          retention-days: 5

      - name: Store Plan for PR Comment
        run: echo "PLAN<<EOF" >> $GITHUB_ENV && cat terraform/${{ matrix.dir }}/plan.txt >> $GITHUB_ENV && echo "EOF" >> $GITHUB_ENV

      - name: Create Pull Request
        if: matrix.dir == 'backend' # Run only once to avoid multiple PRs
        uses: actions/github-script@v7
        env:
          PLAN_BACKEND: "${{ github.workspace }}/terraform/backend/plan.txt"
          PLAN_DEPLOYMENT: "${{ github.workspace }}/terraform/deployment/plan.txt"
          PLAN_INFRA: "${{ github.workspace }}/terraform/infra/plan.txt"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const plans = {
              backend: fs.existsSync(process.env.PLAN_BACKEND) ? fs.readFileSync(process.env.PLAN_BACKEND, 'utf8') : 'No changes',
              deployment: fs.existsSync(process.env.PLAN_DEPLOYMENT) ? fs.readFileSync(process.env.PLAN_DEPLOYMENT, 'utf8') : 'No changes',
              infra: fs.existsSync(process.env.PLAN_INFRA) ? fs.readFileSync(process.env.PLAN_INFRA, 'utf8') : 'No changes'
            };
            const delimiter = '```';
            const body = `
            ## Terraform Plan for dev to main

            <details><summary>Backend Plan</summary>
            ${delimiter}terraform
            ${plans.backend}
            ${delimiter}
            </details>

            <details><summary>Deployment Plan</summary>
            ${delimiter}terraform
            ${plans.deployment}
            ${delimiter}
            </details>

            <details><summary>Infra Plan</summary>
            ${delimiter}terraform
            ${plans.infra}
            ${delimiter}
            </details>
            `;
            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Terraform changes from dev to main',
              head: 'dev',
              base: 'main',
              body: body
            });
            console.log(`Created PR #${pr.data.number}`);

  terraform-plan-pr:
    name: Terraform Plan Preview on PR
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    strategy:
      matrix:
        dir: [backend, deployment, infra]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.8

      - name: Configure AWS Credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: echo "AWS credentials configured"

      - name: Terraform Init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: terraform init
        working-directory: terraform/${{ matrix.dir }}

      - name: Terraform Plan
        id: plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: |
          terraform plan -no-color -out=tfplan -var-file=../terraform.tfvars
          terraform show -no-color tfplan > plan.txt
        working-directory: terraform/${{ matrix.dir }}

      - name: Comment Terraform Plan on PR
        uses: actions/github-script@v7
        env:
          PLAN: "${{ github.workspace }}/terraform/${{ matrix.dir }}/plan.txt"
          DIR: "${{ matrix.dir }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync(process.env.PLAN, 'utf8');
            const delimiter = '```';
            const body = `
            ## Terraform Plan - ${process.env.DIR}
            <details><summary>Click to view plan for ${process.env.DIR}</summary>

            ${delimiter}terraform
            ${plan}
            ${delimiter}
            </details>
            `;
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: terraform-plan-pr
    strategy:
      matrix:
        dir: [backend, deployment, infra]
    environment: production # Adjust to your environment name

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.8

      - name: Configure AWS Credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: echo "AWS credentials configured"

      - name: Download Terraform Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan-${{ matrix.dir }}
          path: terraform/${{ matrix.dir }}

      - name: Terraform Init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: terraform init
        working-directory: terraform/${{ matrix.dir }}

      - name: Terraform Apply
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: terraform apply -auto-approve tfplan
        working-directory: terraform/${{ matrix.dir }}