name: "Terraform CI/CD"

on:
  push:
    branches:
      - dev
      - main
    paths:
      - 'terraform/backend/**'
      - 'terraform/deployment/**'
      - 'terraform/infra/**'
      - 'terraform/terraform.tfvars'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'

env:
  TF_LOG: INFO
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

jobs:
  debug-environment-check:
    name: Debug Environment Secrets
    runs-on: ubuntu-latest
    steps:
      - name: Check AWS_ACCESS_KEY_ID
        run: echo "AWS_ACCESS_KEY_ID is available" || echo "AWS_ACCESS_KEY_ID is not available!"
      - name: Check AWS_SECRET_ACCESS_KEY
        run: echo "AWS_SECRET_ACCESS_KEY is available" || echo "AWS_SECRET_ACCESS_KEY is not available!"
      - name: Check AWS_DEFAULT_REGION
        run: echo "AWS_DEFAULT_REGION is available" || echo "AWS_DEFAULT_REGION is not available!"

  terraform-plan:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    strategy:
      matrix:
        dir: [backend, deployment, infra]
    defaults:
      run:
        shell: bash
        working-directory: terraform/${{ matrix.dir }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.8

      - name: Cache Terraform Providers
        uses: actions/cache@v4
        with:
          path: ~/.terraform.d/plugin-cache
          key: terraform-${{ runner.os }}-${{ hashFiles('**/*.tf*') }}
          restore-keys: terraform-${{ runner.os }}

      - name: Terraform Init
        run: terraform init -backend-config="bucket=${{ secrets.BUCKET_TF_STATE }}" || exit 1

      - name: Terraform Format Check
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -input=false -out=tfplan -var-file=../terraform.tfvars
          terraform show -no-color tfplan > plan.txt

      - name: Upload Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ matrix.dir }}
          path: terraform/${{ matrix.dir }}/plan.txt

  comment-on-pr:
    name: "Comment Terraform Plan on PR"
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download All Plans
        uses: actions/download-artifact@v4
        with:
          path: ./plans

      - name: Create PR Comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');

            const dirs = ['backend', 'deployment', 'infra'];
            let body = `# Terraform Plans Preview\n\n`;

            for (const dir of dirs) {
              const filePath = path.join('plans', `terraform-plan-${dir}`, 'plan.txt');
              let content = 'No plan found.';
              if (fs.existsSync(filePath)) {
                content = fs.readFileSync(filePath, 'utf8');
              }
              body += `### Plan for ${dir}\n<details>\n<summary>Click to expand</summary>\n\n\`\`\`terraform\n${content}\n\`\`\`\n</details>\n\n`;
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  terraform-apply:
    name: "Terraform Apply"
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: terraform-plan
    strategy:
      matrix:
        dir: [backend, deployment, infra]
    defaults:
      run:
        shell: bash
        working-directory: terraform/${{ matrix.dir }}
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.8

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan-${{ matrix.dir }}
          path: terraform/${{ matrix.dir }}

      - name: Terraform Init
        run: terraform init -backend-config="bucket=${{ secrets.BUCKET_TF_STATE }}"

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
